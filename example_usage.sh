#!/bin/bash

# Example script showing how to interact with ExprPredictor MCP Tools
# This demonstrates the kinds of requests that would be sent by a GitHub MCP server

echo "ExprPredictor MCP Tools Example Usage"
echo "======================================"

# Start the MCP demo tool in the background (in practice, this would be managed by the MCP server)
./mcp_demo > mcp_output.txt 2>&1 &
MCP_PID=$!

# Give it a moment to initialize
sleep 1

echo ""
echo "Example 1: List available tools"
echo "Request that would be sent by MCP server:"
cat << 'EOF'
{
  "method": "tools/list",
  "params": {}
}
EOF

echo ""
echo "Example 2: Get schema for expr_par_get_free_pars tool"
echo "Request that would be sent by MCP server:"
cat << 'EOF'
{
  "method": "tools/get_schema",
  "params": {
    "name": "expr_par_get_free_pars"
  }
}
EOF

echo ""
echo "Example 3: Execute expr_predictor_obj_func tool"
echo "Request that would be sent by MCP server:"
cat << 'EOF'
{
  "method": "tools/call",
  "params": {
    "name": "expr_predictor_obj_func",
    "arguments": {
      "parameters": {
        "maxBindingWts": [1.0, 1.5, 2.0],
        "factorIntMat": {
          "rows": 3,
          "cols": 3,
          "data": [
            [1.0, 0.5, 0.0],
            [0.5, 1.0, 0.3],
            [0.0, 0.3, 1.0]
          ]
        },
        "txpEffects": [1.2, 1.5, 0.8],
        "repEffects": [0.0, 0.0, 0.2],
        "basalTxp": 1.0
      }
    }
  }
}
EOF

echo ""
echo "Example 4: Execute expr_par_get_free_pars tool"
echo "Request that would be sent by MCP server:"
cat << 'EOF'
{
  "method": "tools/call",
  "params": {
    "name": "expr_par_get_free_pars",
    "arguments": {
      "parameters": {
        "maxBindingWts": [1.0, 1.5, 2.0],
        "factorIntMat": {
          "rows": 3,
          "cols": 3,
          "data": [
            [1.0, 0.5, 0.0],
            [0.5, 1.0, 0.3],
            [0.0, 0.3, 1.0]
          ]
        },
        "txpEffects": [1.2, 1.5, 0.8],
        "repEffects": [0.0, 0.0, 0.2],
        "basalTxp": 1.0
      },
      "coopMat": {
        "rows": 3,
        "cols": 3,
        "data": [
          [0, 1, 0],
          [1, 0, 1],
          [0, 1, 0]
        ]
      },
      "actIndicators": [true, true, false],
      "repIndicators": [false, false, true]
    }
  }
}
EOF

echo ""
echo "Example 5: Execute expr_par_load tool"
echo "Request that would be sent by MCP server:"
cat << 'EOF'
{
  "method": "tools/call",
  "params": {
    "name": "expr_par_load",
    "arguments": {
      "filename": "parameters.txt",
      "coopMat": {
        "rows": 2,
        "cols": 2,
        "data": [
          [0, 1],
          [1, 0]
        ]
      },
      "repIndicators": [false, true]
    }
  }
}
EOF

echo ""
echo "=================================="
echo "These examples show the JSON-RPC style requests that would be sent"
echo "by the GitHub MCP server to interact with the ExprPredictor tools."
echo ""
echo "The actual responses are generated by the running MCP demo tool."
echo "In production, these tools would be integrated with a proper MCP server"
echo "that handles HTTP/WebSocket communication and protocol management."

# Clean up
kill $MCP_PID 2>/dev/null
rm -f mcp_output.txt

echo ""
echo "For more details, see MCP_TOOLS.md"